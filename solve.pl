% correct(+Sudoku, +Field, -CorrectField)
% computes correct Field value within Sudoku
% returns also Field for easier handling in set_value
correct(Sudoku, [X, Y, Value], CorrectField) :-
	get_row_values(Sudoku, [X, Y, Value], RowValues),
	get_column_values(Sudoku, [X, Y, Value], ColumnValues),
	get_area_values(Sudoku, [X, Y, Value], AreaValues),
	Sudoku = sudoku(M, N, _),
	MaxPossible is M * N,
	!,
	between(1, MaxPossible, Correct),
	\+ member(Correct, RowValues),
	\+ member(Correct, ColumnValues),
	\+ member(Correct, AreaValues),
	CorrectField = [X, Y, Correct].

% solve(+Sudoku, +ListOfFields, -SolvedSudoku)
% solves Sudoku by trying possible correct values in such Sudoku state
% prepared list of fields is generated by listify
% classic backtracking is being used
solve(Sudoku, [], Sudoku, _).
solve(Sudoku, [H|OrderTail], SolvedSudoku, Debug) :-
	correct(Sudoku, H, Correct),
	set_value(Sudoku, H, Correct, NewSudoku),
	(Debug = 'debug', print_sudoku(NewSudoku), format('~n', _) ; true),
	solve(NewSudoku, OrderTail, SolvedSudoku, Debug).